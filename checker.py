import os
import asyncio
import logging
from aiogram import Bot
from dotenv import load_dotenv
from binance.um_futures import UMFutures  # –ö–ª–∏–µ–Ω—Ç Binance Futures

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è, —É—Ä–æ–≤–µ–Ω—å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = os.getenv("BOT_TOKEN") or "6363721955:AAEyulmzYj5hF45DPJV1TWLCw_hRj6Y_jx0"  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
CHAT_ID = os.getenv("CHAT_ID") or "-4907450617"  # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL") or 30)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
THRESHOLD_PERCENT = float(os.getenv("THRESHOLD_PERCENT") or 2)  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (%)
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY", "")  # API –∫–ª—é—á –æ—Ç Binance (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET", "")  # API —Å–µ–∫—Ä–µ—Ç

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Binance Futures (–º–æ–∂–Ω–æ –±–µ–∑ –∫–ª—é—á–µ–π)
client = UMFutures(key=BINANCE_API_KEY, secret=BINANCE_API_SECRET)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ü–µ–Ω—ã
last_price = None

def fetch_price() -> float:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã ETHUSDT —Å Binance Futures.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ asyncio.to_thread.
    """
    data = client.ticker_price(symbol="ETHUSDT")
    price = float(data["price"])
    logging.debug(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ —Å Binance: {price}")
    return price

async def check_loop():
    """
    –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—É ETHUSDT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.
    """
    global last_price
    logging.info("üöÄ –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã ETHUSDT")

    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —Ç.–∫. py-binance –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
            current = await asyncio.to_thread(fetch_price)
            logging.info(f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current}")

            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞ ‚Äî –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
            if last_price is not None:
                diff = abs(current - last_price) / last_price * 100
                logging.info(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {diff:.4f}%")

                # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ‚Äî —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if diff >= THRESHOLD_PERCENT:
                    msg = f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã ETHUSDT: {diff:.2f}%\n–ë—ã–ª–æ: {last_price}\n–°—Ç–∞–ª–æ: {current}"
                    await bot.send_message(CHAT_ID, msg)
                    logging.info("üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏")
                else:
                    # –ü—Ä–∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ‚Äî —Ç–∞–∫–∂–µ —É–≤–µ–¥–æ–º–ª—è–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    msg = f"‚ÑπÔ∏è –¶–µ–Ω–∞ ETHUSDT —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {diff:.2f}%\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current}"
                    await bot.send_message(CHAT_ID, msg)
                    logging.debug("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            else:
                logging.info("üîî –ù–∞—á–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã")

            last_price = current  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É

        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")

        # ‚è≤ –ñ–¥—ë–º –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(POLL_INTERVAL)
